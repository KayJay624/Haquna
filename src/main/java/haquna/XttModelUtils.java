package haquna;

import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;

import java.util.Date;

import heart.xtt.Attribute;
import heart.xtt.Rule;
import heart.xtt.Table;
import heart.xtt.Type;
import heart.xtt.XTTModel;

public class XttModelUtils {
	
	public static void saveToFile(XTTModel model, String path) {
		try {
			PrintWriter writer = new PrintWriter(path, "UTF-8");
			writer.println("%");
			writer.println("% $" + new Date().toString() + "$" );
			writer.println("%" );
			writer.println("% File generated by HaQuNa model save method" );
			writer.println("%" );
			writer.println("% HeaRT case" );
			writer.println("%" );
			writer.println("%" );
			writer.println("%     Copyright (C) 2006-9 by the HeKatE Project" );
			writer.println("%" );
			writer.println("%     HeaRT has been develped by the HeKatE Project, ");
			writer.println("%     see http://hekate.ia.agh.edu.pl");
			writer.println("%" );
			writer.println("%     This file is part of HeaRT." );
			writer.println("%" );
			writer.println("%     HeaRT is free software: you can redistribute it and/or modify" );
			writer.println("%     it under the terms of the GNU General Public License as published by" );
			writer.println("%     the Free Software Foundation, either version 3 of the License, or" );
			writer.println("%     (at your option) any later version." );
			writer.println("%" );
			writer.println("%     HeaRT is distributed in the hope that it will be useful," );
			writer.println("%     but WITHOUT ANY WARRANTY; without even the implied warranty of" );
			writer.println("%     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the" );
			writer.println("%     GNU General Public License for more details." );
			writer.println("%" );
			writer.println("%     You should have received a copy of the GNU General Public License" );
			writer.println("%     along with HeaRT.  If not, see <http://www.gnu.org/licenses/>." );
			writer.println("%" );
			writer.println("%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%");
			
			writer.println();
			writer.println(":-ensure_loaded('heart.pl')");
			writer.println();
			
			writer.println("%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% TYPES DEFINITIONS %%%%%%%%%%%%%%%%%%%%%%%%%%");
			writer.println();
			for(Type type : model.getTypes()) {
				writer.println(type.toHMR());
			}
			
			writer.println("%%%%%%%%%%%%%%%%%%%%%%%%% ATTRIBUTES DEFINITIONS %%%%%%%%%%%%%%%%%%%%%%%%%%");
			writer.println();
			for(Attribute attr : model.getAttributes()) {
				writer.println(attr.toHMR());
			}
			
			writer.println("%%%%%%%%%%%%%%%%%%%%%%%% TABLE SCHEMAS DEFINITIONS %%%%%%%%%%%%%%%%%%%%%%%%");
			writer.println();
			for(Table table : model.getTables()) {
				writer.println(table.toHMR());
			}
			
			writer.println("%%%%%%%%%%%%%%%%%%%%%%%%%%%% RULES DEFINITIONS %%%%%%%%%%%%%%%%%%%%%%%%%%%%");
			writer.println();
			for(Table table : model.getTables()) {
				for(Rule rule : table.getRules()) {
					writer.println(rule.toHMR());
				}
			}
			
			writer.close();
			
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
}
